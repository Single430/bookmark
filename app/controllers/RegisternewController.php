<?php

use Phalcon\Tag;
use Phalcon\Validation,
    Phalcon\ValidationInterface;

use Phalcon\Validation\Validator\Email,
    Phalcon\Validation\Validator\Regex,
    Phalcon\Validation\Validator\PresenceOf,
    Phalcon\Validation\Validator\Uniqueness,
    Phalcon\Validation\Validator\StringLength;

class RegisternewController extends ControllerBase
{
    protected function initialize()
    {
        $this->tag->setTitle('注册结果');
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        try {
            $user = new User();
            $validation = new Validation();

            $email = $_POST['email'];
            $username = $_POST['username'];
            $password = $_POST['password'];
            $password2 = $_POST['password2'];

            $validation->add('email', new PresenceOf(array(
                'message' => '邮箱不能为空！'
            )));
            $validation->add('username', new PresenceOf(array(
                'message' => '名字不能为空！'
            )));
            $validation->add('password', new PresenceOf(array(
                'message' => '密码不能为空！'
            )));
            $validation->add('password2', new PresenceOf(array(
                'message' => '密码不能为空！'
            )));

            $validation->add('email', new Email(array(
                'message' => '您的邮箱不合法！'
            )));

            //检验名字是否合法
            $validation->add('username', new StringLength(array(
                'max' => 16,
                'min' => 3,
                'messageMaximum' => '您的名字太长了！',
                'messageMinimum' => '您的名字太过简单！'
            )));

            //检验密码是否合法
            $validation->add('password', new StringLength(array(
                'max' => 16,
                'min' => 6,
                'messageMaximum' => '您的密码太长了！',
                'messageMinimum' => '您的密码太过简单！'
            )));
            $validation->add('password', new Regex([
                'pattern' => '/^[\w]*$/',
                'message' => '请使用合法密码!'
            ]));

            //检验名字是否已经被注册
            $validation->add('username', new Uniqueness(array(
                'model' => new User(),
                'message' => '用户名已被注册！'
            )));
            $validation->add('email', new Uniqueness(array(
                'model' => new User(),
                'message' => '邮箱已被注册！'
            )));

            $messages = $validation->validate($_POST);
            if(count($messages)){
                foreach ($messages as $message) {
                    throw new Exception($message);
                }
            }

            if ($password != $password2) {
                throw new Exception('两次密码输入不一致，请重新输入.');
            }

            $user->email = $email;
            $user->username = $username;
            $user->passwd = sha1($password);

            $result = $user->save();
            if($result){
                $error = "注册成功，请返回登录。";
                $flag = 1;
                $this->session->set('error', $error);
                $this->session->set('flag', $flag);
//                $this->session->set('username', $username);
//                return $this->dispatcher->forward(
//                    [
//                        "controller"    => "index",
//                        "action"        => "index",
//                    ]
//                );
            }else{
                $error = "注册失败，未知原因。";
                $flag = 0;
                $this->session->set('error', $error);
                $this->session->set('flag', $flag);
            }

        }catch (Exception $e) {
            $error = $e->getMessage();
            $flag = 0;
            $this->session->set('error', $error);
            $this->session->set('flag', $flag);
//            echo '<h3>错误: </h3>';
//            echo $e->getMessage();
//            echo Tag::linkTo("register", '<br />返回');
//            exit;
        }
//        $this->view->disable();
    }
}

